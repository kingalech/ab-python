# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

#trigger:
#- master

stages:
- stage: Build

  jobs: 
  - job: Build
    variables:
    - group: SonarQubeVarialbes
    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
      displayName: 'Prepare analysis on SonarQube'
      inputs:
        SonarQube: Sonar
        scannerMode: CLI
        configMode: manual
        cliProjectKey: ab
        cliProjectName: ab

    - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
      displayName: 'Run Code Analysis'

    - task: ShellScript@2
      displayName: "Print the task id"
      inputs:
        scriptPath: "$(System.DefaultWorkingDirectory)/quality-gate-checker.sh"
        args: "$(sonar_token) $(sonar_server) $(System.DefaultWorkingDirectory)/.scannerwork/report-task.txt"

    - task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
      displayName: 'Publish Quality Gate Result'


    - task: Docker@2
      displayName: buildAndPush
      inputs:
        containerRegistry: kidockerhub
        repository: kingalech/dreamteam
        Dockerfile: 'dreamteam-app/Dockerfile'

- stage: Deploy
  
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - group: DEV-Variables
    - group: GlobalVars
    - group: keys
    steps:
    - task: Bash@3
      displayName: Fetch CloudHedge CLI
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          wget http://18.219.238.77/chcli
          chmod +x chcli
          echo `pwd`
                              
    - task: Bash@3
      displayName: CloudHedge Login
      inputs:
        targetType: 'inline'
        script: |     
          echo "Logging to Cloudhedge application server"

          echo $(System.DefaultWorkingDirectory)/chcli login --username=$(chuser) --password=$(ch-password) --server=$(churl)

          $(System.DefaultWorkingDirectory)/chcli login --username=$(chuser) --password=$(ch-password) --server=$(churl)

    - task: Bash@3
      displayName: Create AppBluePrint new version
      inputs:
        targetType: 'inline'
        script: |     
          echo 'Creating the application blueprint new version'

          echo $(System.DefaultWorkingDirectory)/chcli  cluster addVersion --versionName="dt-$(ENV_NAME)-$(Build.BuildId)"  --blueprintId=$(APP_BLUEPRINT_ID)

          $(System.DefaultWorkingDirectory)/chcli  cluster addVersion --versionName="dt-$(ENV_NAME)-$(Build.BuildId)"  --blueprintId=$(APP_BLUEPRINT_ID) 
          sleep 5 

    - task: Bash@3
      displayName: AppBluePrint Services
      inputs:
        targetType: 'inline'
        script: |
          set -x

          sudo apt  install jq -y

          echo "[$(Build.BuildId)]"

          APPVERSIONID=$($(System.DefaultWorkingDirectory)/chcli cluster listApp | jq '.apps[] |  select(.name == "d1") | .versions[] | select(.name == "dt-$(ENV_NAME)-$(Build.BuildId)") | ._id' | tr -d '"')

          echo "Appversion ID is : $APPVERSIONID"

          echo $(System.DefaultWorkingDirectory)/chcli cluster addService --name=app-tier --appVersion=$APPVERSIONID --image='kingalech/dreamteam' --imageTag=$(Build.BuildId) --port=5000

          $(System.DefaultWorkingDirectory)/chcli cluster addService --name=app-tier --appVersion=$APPVERSIONID --image='kingalech/dreamteam' --imageTag=$(Build.BuildId) --port=5000
          sleep 5
    - task: Bash@3
      displayName: DeployOnCluster
      inputs:
        targetType: 'inline'
        script: |
          set -x 

          BUILDVERSIONID=$($(System.DefaultWorkingDirectory)/chcli cluster listApp | jq '.apps[] |  select(.name == "d1") | .versions[] | select(.name == "dt-$(ENV_NAME)-$(Build.BuildId)") | ._id' | tr -d '"')         

          echo "$BUILDVERSIONID"

          echo $(System.DefaultWorkingDirectory)/chcli redeploy --appId=$(APP_BLUEPRINT_ID) --appVersionId=$BUILDVERSIONID --clusterId=$(CLUSTER_ID)  --env=$(ENV_ID) --imageTag=$(Build.BuildId) 

          $(System.DefaultWorkingDirectory)/chcli redeploy --appId=$(APP_BLUEPRINT_ID) --appVersionId=$BUILDVERSIONID --clusterId=$(CLUSTER_ID)  --env=$(ENV_ID) --imageTag=$(Build.BuildId) 


    - task: DockerInstaller@0
      displayName: 'Setup Functional Automation Tests'

    - task: Bash@3
      displayName: 'Execute Functional Tests'
      inputs:
        targetType: 'inline'
        script: |
          /opt/hostedtoolcache/docker-stable/17.9.0-ce/x64/docker run -e URL=http://app-tier-d1-dev.demoapp.trial.cloudhedge.info -e EMAIL=uupadhyay@cloudhedge.io -e PASSWORD=Cloudhedge@123 baravkarrohit/autotest:v1